def answer_one():
    from sklearn.linear_model import LinearRegression
    from sklearn.preprocessing import PolynomialFeatures
    result =[]
    for dg in [1,3,6,9]:
        poly = PolynomialFeatures(degree=dg)
        X_train_poly = poly.fit_transform(X_train.reshape(-1,1))
    
        linreg = LinearRegression().fit(X_train_poly, y_train)
        test_x = np.linspace(0,10,100).reshape(-1,1)
        test_x_poly = poly.fit_transform(test_x )
        y_predict = linreg.predict(test_x_poly)
        res = y_predict.flatten()
        result.append(res)
        
    
    return result
answer_one()



def answer_two():
    from sklearn.linear_model import LinearRegression
    from sklearn.preprocessing import PolynomialFeatures
    from sklearn.metrics.regression import r2_score

    r2_train = []
    r2_test = []
    for dg in range (0,10):
        poly = PolynomialFeatures(degree=dg)
        
        
        X_train_poly = poly.fit_transform(X_train.reshape(-1,1))
        linreg = LinearRegression().fit(X_train_poly, y_train)
        r2_tr = linreg.score(X_train_poly, y_train)
        r2_train.append(r2_tr)
        
        X_test_poly = poly.fit_transform(X_test.reshape(-1,1))
        #linreg = LinearRegression().fit(X_test_poly, y_test)
        r2_ts = linreg.score(X_test_poly, y_test)
        r2_test.append(r2_ts)
        
        #print (r2_train)
        #r2_test = linreg.score(test_x_poly, y_test)
    return (r2_train, r2_test)
answer_two()