
Jupyter Notebook
Assignment 1 Last Checkpoint: 05/24/2018 (autosaved) [Python 3]

Python 3

    File
    Edit
    View
    Insert
    Cell
    Kernel
    Widgets
    Help

You are currently looking at version 1.1 of this notebook. To download notebooks and datafiles, as well as get help on Jupyter notebooks in the Coursera platform, visit the Jupyter Notebook FAQ course resource.
Assignment 1 - Creating and Manipulating Graphs

Eight employees at a small company were asked to choose 3 movies that they would most enjoy watching for the upcoming company movie night. These choices are stored in the file Employee_Movie_Choices.txt.

A second file, Employee_Relationships.txt, has data on the relationships between different coworkers.

The relationship score has value of -100 (Enemies) to +100 (Best Friends). A value of zero means the two employees haven't interacted or are indifferent.

Both files are tab delimited.

import networkx as nx

import pandas as pd

import numpy as np

from networkx.algorithms import bipartite

?

?

# This is the set of employees

employees = set(['Pablo',

                 'Lee',

                 'Georgia',

                 'Vincent',

                 'Andy',

                 'Frida',

                 'Joan',

                 'Claude'])

?

# This is the set of movies

movies = set(['The Shawshank Redemption',

              'Forrest Gump',

              'The Matrix',

              'Anaconda',

              'The Social Network',

              'The Godfather',

              'Monty Python and the Holy Grail',

              'Snakes on a Plane',

              'Kung Fu Panda',

              'The Dark Knight',

              'Mean Girls'])

?

?

# you can use the following function to plot graphs

# make sure to comment it out before submitting to the autograder

def plot_graph(G, weight_name=None):

    '''

    G: a networkx G

    weight_name: name of the attribute for plotting edge weights (if G is weighted)

    '''

    %matplotlib notebook

    import matplotlib.pyplot as plt

    

    plt.figure()

    pos = nx.spring_layout(G)

    edges = G.edges()

    weights = None

    

    if weight_name:

        weights = [int(G[u][v][weight_name]) for u,v in edges]

        labels = nx.get_edge_attributes(G,weight_name)

        nx.draw_networkx_edge_labels(G,pos,edge_labels=labels)

        nx.draw_networkx(G, pos, edges=edges, width=weights);

    else:

        nx.draw_networkx(G, pos, edges=edges);

{'Kung Fu Panda', 'The Dark Knight', 'The Matrix', 'Snakes on a Plane', 'The Godfather', 'The Social Network', 'Anaconda', 'Forrest Gump', 'Mean Girls', 'Monty Python and the Holy Grail', 'The Shawshank Redemption'}

Question 1

Using NetworkX, load in the bipartite graph from Employee_Movie_Choices.txt and return that graph.

This function should return a networkx graph with 19 nodes and 24 edges

def answer_one():

    data = pd.read_csv('Employee_Movie_Choices.txt',skiprows=0,sep='\t')

    #print (data)

    

    G=nx.Graph()

    G.add_nodes_from(data['#Employee'],bipartite=0)

    G.add_nodes_from(data['Movie'],bipartite=1)

    G.add_edges_from(

    [(row['#Employee'], row['Movie']) for idx, row in data.iterrows()])

    # Your Code Here

    #plot_graph(G)

    #print (len(G.edges()))

    return G

answer_one()

<networkx.classes.graph.Graph at 0x7f99942a0630>

Question 2

Using the graph from the previous question, add nodes attributes named 'type' where movies have the value 'movie' and employees have the value 'employee' and return that graph.

This function should return a networkx graph with node attributes {'type': 'movie'} or {'type': 'employee'}

def answer_two():

    G = answer_one()

    for i in G.nodes():

        if i in movies:

            G.node[i]['type']='movie'

            

    for i in G.nodes():

        if i in employees:

            G.node[i]['type']='employee'        

    

    # Your Code Here

    #plot_graph(G)

    #Sprint (G.nodes(data=True))

    return G

?

answer_two()

<networkx.classes.graph.Graph at 0x7f99978999b0>

Question 3

Find a weighted projection of the graph from answer_two which tells us how many movies different pairs of employees have in common.

This function should return a weighted projected graph.

def answer_three():

    G = answer_two()

    P = bipartite.weighted_projected_graph(G,employees)

    #plot_graph(P)

    #print (P.edge['Andy']['Frida'])

    return P

answer_three()

<networkx.classes.graph.Graph at 0x7f999423d940>

Question 4

Suppose you'd like to find out if people that have a high relationship score also like the same types of movies.

Find the Pearson correlation ( using DataFrame.corr() ) between employee relationship scores and the number of movies they have in common. If two employees have no movies in common it should be treated as a 0, not a missing value, and should be included in the correlation calculation.

This function should return a float.

def answer_four():

    P = answer_three()

    df = pd.read_csv('Employee_Relationships.txt',header=None,sep='\t')

    df['movie_score'] = 0

    for index, row in df.iterrows():

        movie =  (df.iloc[index]['movie_score'])

        X = df.iloc[index][0]

        Y = df.iloc[index][1]

        

        try:

            z = P.edge[X][Y]

            z = z['weight']

        except:

            z=0

        df.loc[index,'movie_score'] = z

        

    

    pearson_corr = (df[2].corr(df['movie_score']))

    # Your Code Here

    

    return pearson_corr

answer_four()

0.7883962221733477

?

?

