Reading text file

df = pd.read_table('university_towns.txt',error_bad_lines=False,header=None)
df = pd.read_csv('university_towns.txt',error_bad_lines=False,header=None)

Shape is different for both methods. read_table worked
error_bad_lines=False --> Does not read corrupted rows
header = None --> If first line is not column name

-----------------------------------------------------------------------------------------------------------------------------------------------------------------
Index as array
df.index.values
-----------------------------------------------------------------------------------------------------------------------------------------------------------------

Rename column name

df = df.rename(columns={"Region": "RegionName"})
-----------------------------------------------------------------------------------------------------------------------------------------------------------------

Add new column with default value ""

df["State"] =""

-----------------------------------------------------------------------------------------------------------------------------------------------------------------

Copy values from column A to column B

df['B'] = df['A']
-----------------------------------------------------------------------------------------------------------------------------------------------------------------

Column names as list
cols = df.columns.tolist()
-----------------------------------------------------------------------------------------------------------------------------------------------------------------
Move last column to first

cols = cols[-1:] + cols[:-1]
df = df[cols]

-----------------------------------------------------------------------------------------------------------------------------------------------------------------
Change value if string does not contain a substring

df.loc[~df['State'].str.contains('substring'),'State'] = ""

-----------------------------------------------------------------------------------------------------------------------------------------------------------------
Remove column values from [ to the end

df['State'] = df['State'].str.replace('\[.*','')

-----------------------------------------------------------------------------------------------------------------------------------------------------------------
Remove new lines
df['RegionName'] = df['RegionName'].str.replace('\n','')

-----------------------------------------------------------------------------------------------------------------------------------------------------------------
Iterating rows in df

for index, row in df.iterrows():
    print (row)
-----------------------------------------------------------------------------------------------------------------------------------------------------------------
Assign Nan to a value
row['RegionName'] = np.NaN

-----------------------------------------------------------------------------------------------------------------------------------------------------------------
Drop all rows with value NaN in one column

df.dropna(subset=['RegionName'], how='all', inplace = True)

-----------------------------------------------------------------------------------------------------------------------------------------------------------------
Drop columns based on reg expression
df = df[df.columns.drop(list(df.filter(regex='-')))]     -- drops columns with char -

-----------------------------------------------------------------------------------------------------------------------------------------------------------------
Drop multiple columns by names
df = df[df.columns.drop(['RegionID', 'Metro', 'CountyName', 'SizeRank'])]
-----------------------------------------------------------------------------------------------------------------------------------------------------------------
If index does not contain values (after deleting rows, index still stays), re index the rows

df = df.reset_index(drop=True)
    
-----------------------------------------------------------------------------------------------------------------------------------------------------------------
Shape -- Number of rows and columns
df.shape  

-----------------------------------------------------------------------------------------------------------------------------------------------------------------
Select only a few columns in dataframe
df = df[['Year','GDP','Quarterly']]

-----------------------------------------------------------------------------------------------------------------------------------------------------------------
Drop rows based on index range
df.drop(df.index[3:5])

-----------------------------------------------------------------------------------------------------------------------------------------------------------------
Join df1 with multi-index df2
df1 = ul.join(hdf, on=['State', 'RegionName'], how='inner')

-----------------------------------------------------------------------------------------------------------------------------------------------------------------
Multi index to a list of tuples
ul.to_records(index=False).tolist()
-----------------------------------------------------------------------------------------------------------------------------------------------------------------
Change all NaN to zeroes
df = df.fillna(value=0)
-----------------------------------------------------------------------------------------------------------------------------------------------------------------
ttest
ttest_ind(group1['PriceRatio'],group2['PriceRatio'],nan_policy='omit')


-----------------------------------------------------------------------------------------------------------------------------------------------------------------
Change all NaN to zero
df = df.fillna(value=0)
-----------------------------------------------------------------------------------------------------------------------------------------------------------------
sklearn.dataset  to a pandas DataFrame
df = pd.DataFrame(cancer.data, columns=cancer.feature_names)

-----------------------------------------------------------------------------------------------------------------------------------------------------------------
Rename index
target = target.rename(index={0:'malignant', 1:'benign'})
-----------------------------------------------------------------------------------------------------------------------------------------------------------------
Count number of values in a column
target = cancerdf['target'].value_counts()
-----------------------------------------------------------------------------------------------------------------------------------------------------------------
Array to series:
ser = pd.Series(arr)

-----------------------------------------------------------------------------------------------------------------------------------------------------------------
df = pd.DataFrame(arr,columns=['column1'])

-----------------------------------------------------------------------------------------------------------------------------------------------------------------
New column in series where new column has the length of value in another column

ser['len'] =ser.apply(lambda x: len(x))
-----------------------------------------------------------------------------------------------------------------------------------------------------------------
Apply function at row level
df['score'] = df.apply(lambda row: print (row['D1']), axis=1 )
paraphrases['score'] = paraphrases.apply(lambda row: document_path_similarity(row['D1'], row['D2']), axis=1 )
Here row represents each row in df
-----------------------------------------------------------------------------------------------------------------------------------------------------------------
lambda with if else

    paraphrases['label'] = paraphrases.apply(lambda row: 1 if document_path_similarity(row['D1'], row['D2'])>0.75 else 0, axis=1 )



-----------------------------------------------------------------------------------------------------------------------------------------------------------------

select rows in to data frame where value of a column is equal to a particular value
df1 = df.loc[df['len'] ==5]
-----------------------------------------------------------------------------------------------------------------------------------------------------------------
Update one column value based on index 
df.loc[index,'movie_score'] = z
-----------------------------------------------------------------------------------------------------------------------------------------------------------------



 fit a k-nearest neighbors (knn) classifier with X_train, y_train and using one nearest neighbor (n_neighbors = 1).

knn = KNeighborsClassifier(n_neighbors=1)
    knn.fit(X_train, y_train)
-----------------------------------------------------------------------------------------------------------------------------------------------------------------
Mean values of each column in an array

cancerdf.mean().values
-----------------------------------------------------------------------------------------------------------------------------------------------------------------
Reshape data from 1D to 2D
list.reshape(1,-1)
-----------------------------------------------------------------------------------------------------------------------------------------------------------------
Predict value using knn

knn = KNeighborsClassifier(n_neighbors=1)
    knn.fit(X_train, y_train)
    knn.score(X_test,y_test)
    return knn.predict(means)
-----------------------------------------------------------------------------------------------------------------------------------------------------------------
Accuracy

accuracy = knn.score(X_test, y_test)
-----------------------------------------------------------------------------------------------------------------------------------------------------------------
# Accuracy = TP + TN / (TP + TN + FP + FN)
# Precision = TP / (TP + FP)
# Recall = TP / (TP + FN)  Also known as sensitivity, or True Positive Rate
# F1 = 2 * Precision * Recall / (Precision + Recall) 
TP - Number of positive predictions that were correct [Credit card fraud transaction: 0 positive predictions for fraud cases if used majority class as majority prediction is not fraud ]
-----------------------------------------------------------------------------------------------------------------------------------------------------------------
Key with max value in a dictionary
max(dict,key=lambda k: dict[k])
-----------------------------------------------------------------------------------------------------------------------------------------------------------------
All rows where col1 has value NaN
df[df['col1'].isnull()]
-----------------------------------------------------------------------------------------------------------------------------------------------------------------
All rows where col1 is not NaN
df[df['col1'].notnull()]
-----------------------------------------------------------------------------------------------------------------------------------------------------------------
Change all column names
df.columns = new_columns_array
