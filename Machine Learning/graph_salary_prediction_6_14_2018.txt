
You are currently looking at version 1.2 of this notebook. To download notebooks and datafiles, as well as get help on Jupyter notebooks in the Coursera platform, visit the Jupyter Notebook FAQ course resource.
Assignment 4

import networkx as nx

import pandas as pd

import numpy as np

import pickle

Part 1 - Random Graph Identification

For the first part of this assignment you will analyze randomly generated graphs and determine which algorithm created them.

P1_Graphs = pickle.load(open('A4_graphs','rb'))

P1_Graphs

[<networkx.classes.graph.Graph at 0x7fed6cc046a0>,
 <networkx.classes.graph.Graph at 0x7fed6cc04b70>,
 <networkx.classes.graph.Graph at 0x7fed6cc04ba8>,
 <networkx.classes.graph.Graph at 0x7fed6cc04be0>,
 <networkx.classes.graph.Graph at 0x7fed6cc04c18>]


P1_Graphs is a list containing 5 networkx graphs. Each of these graphs were generated by one of three possible algorithms:

    Preferential Attachment ('PA')
    Small World with low probability of rewiring ('SW_L')
    Small World with high probability of rewiring ('SW_H')

Anaylze each of the 5 graphs and determine which of the three algorithms generated the graph.

The graph_identification function should return a list of length 5 where each element in the list is either 'PA', 'SW_L', or 'SW_H'.

def graph_identification():

    result = []

    for i in range(0,5):

        G = P1_Graphs[i]

        clustering = nx.average_clustering(P1_Graphs[i])

        shortest_path = nx.average_shortest_path_length(P1_Graphs[i])

        degrees = G.degree()

        degree_values = sorted(set(degrees.values()))

        mx_degree = max(degree_values)

        print (clustering, shortest_path, mx_degree)

        if mx_degree >80:

            result.append('PA')

        elif clustering >0.1:

            result.append('SW_L')

        else:

            result.append('SW_H')

            

    

    

    return result

graph_identification()

0.03167539146454044 4.099161161161161 100
0.5642419635919628 5.089871871871872 13
0.4018222222222227 9.378702269692925 6
0.03780379975223251 3.1048046283934134 92
0.0033037037037037037 5.0785509568313305 11

['PA', 'SW_L', 'SW_L', 'PA', 'SW_H']

Part 2 - Company Emails

For the second part of this assignment you will be workking with a company's email network where each node corresponds to a person at the company, and each edge indicates that at least one email has been sent between two people.

The network also contains the node attributes Department and ManagementSalary.

Department indicates the department in the company which the person belongs to, and ManagementSalary indicates whether that person is receiving a management position salary.

G = nx.read_gpickle('email_prediction.txt')

?

print(nx.info(G))

Name: 
Type: Graph
Number of nodes: 1005
Number of edges: 16706
Average degree:  33.2458

Part 2A - Salary Prediction

Using network G, identify the people in the network with missing values for the node attribute ManagementSalary and predict whether or not these individuals are receiving a management position salary.

To accomplish this, you will need to create a matrix of node features using networkx, train a sklearn classifier on nodes that have ManagementSalary data, and predict a probability of the node receiving a management salary for nodes where ManagementSalary is missing.

Your predictions will need to be given as the probability that the corresponding employee is receiving a management position salary.

The evaluation metric for this assignment is the Area Under the ROC Curve (AUC).

Your grade will be based on the AUC score computed for your classifier. A model which with an AUC of 0.88 or higher will receive full points, and with an AUC of 0.82 or higher will pass (get 80% of the full points).

Using your trained classifier, return a series of length 252 with the data being the probability of receiving management salary, and the index being the node id.

Example:

    1       1.0
    2       0.0
    5       0.8
    8       1.0
        ...
    996     0.7
    1000    0.5
    1001    0.0
    Length: 252, dtype: float64

def salary_predictions():

    

    import numpy as np

    import matplotlib.pyplot as plt

    from sklearn import linear_model, datasets

    from sklearn.model_selection import train_test_split

    from sklearn.linear_model import LogisticRegression

    from sklearn.metrics import roc_curve, auc

    

    #Data preprocessing and exploration

    df = pd.DataFrame(index=G.nodes())

    attr1 = nx.get_node_attributes(G,'Department')

    df['Department'] =  (attr1.values())

    attr2 = nx.get_node_attributes(G,'ManagementSalary')

    df['ManagementSalary'] =  (attr2.values())

    df['clustering'] = pd.Series(nx.clustering(G))

    df['degree'] = pd.Series(G.degree())

    

    #Splitting data into test and train. Only data with known values for ManagementSalary could be selected.

    df_test_train = df[df['ManagementSalary'].notnull()]      

    y = df_test_train['ManagementSalary']

    X = df_test_train[['Department','clustering','degree']]

    X_train, X_test, y_train, y_test = train_test_split(X, y, 

                                                    test_size=0.2, 

                                                    random_state=0)

    

    

    #Train logistic regression model

    lr = LogisticRegression().fit(X_train, y_train)

    y_score_lr = lr.fit(X_train, y_train).decision_function(X_test)

    fpr_lr, tpr_lr, _ = roc_curve(y_test, y_score_lr)

    roc_auc_lr = auc(fpr_lr, tpr_lr)

    print (roc_auc_lr)

?

    

    #Rows to test after training is done. All rows with Management salary is NaN. This is not part of test,train data.

    test_rows = df[df['ManagementSalary'].isnull()]

    test = test_rows[['Department','clustering','degree']]

    

    y_proba_lr = lr.fit(X_train, y_train).predict_proba(test)

    #print (y_proba_lr)

    b = [el[1] for el in y_proba_lr]

    

    y_proba_list = b

    #print (y_proba_list)

    ser = pd.Series(y_proba_list,index = test.index )

    # Your Code Here

    

    return ser

salary_predictions()

0.871062992126

1       0.146093
2       0.563192
5       0.953346
8       0.129446
14      0.332741
18      0.174072
27      0.260802
30      0.310702
31      0.184047
34      0.129059
37      0.122062
40      0.236601
45      0.176392
54      0.244304
55      0.194938
60      0.203416
62      0.993337
65      0.419165
77      0.072168
79      0.122810
97      0.100737
101     0.084763
103     0.185283
108     0.125050
113     0.445693
122     0.065229
141     0.408098
142     0.899728
144     0.097301
145     0.415612
          ...   
913     0.069509
914     0.089119
915     0.017908
918     0.108991
923     0.053301
926     0.087555
931     0.074346
934     0.044663
939     0.028814
944     0.021197
945     0.051357
947     0.093738
950     0.162475
951     0.061267
953     0.049823
959     0.016227
962     0.018095
963     0.152023
968     0.083976
969     0.078136
974     0.063601
984     0.043020
987     0.094568
989     0.076576
991     0.104712
992     0.017528
994     0.020610
996     0.018680
1000    0.045449
1001    0.091769
Length: 252, dtype: float64

Part 2B - New Connections Prediction

For the last part of this assignment, you will predict future connections between employees of the network. The future connections information has been loaded into the variable future_connections. The index is a tuple indicating a pair of nodes that currently do not have a connection, and the Future Connection column indicates if an edge between those two nodes will exist in the future, where a value of 1.0 indicates a future connection.

future_connections = pd.read_csv('Future_Connections.csv', index_col=0, converters={0: eval})

future_connections.head(10)

	Future Connection
(6, 840) 	0.0
(4, 197) 	0.0
(620, 979) 	0.0
(519, 872) 	0.0
(382, 423) 	0.0
(97, 226) 	1.0
(349, 905) 	0.0
(429, 860) 	0.0
(309, 989) 	0.0
(468, 880) 	0.0

Using network G and future_connections, identify the edges in future_connections with missing values and predict whether or not these edges will have a future connection.

To accomplish this, you will need to create a matrix of features for the edges found in future_connections using networkx, train a sklearn classifier on those edges in future_connections that have Future Connection data, and predict a probability of the edge being a future connection for those edges in future_connections where Future Connection is missing.

Your predictions will need to be given as the probability of the corresponding edge being a future connection.

The evaluation metric for this assignment is the Area Under the ROC Curve (AUC).

Your grade will be based on the AUC score computed for your classifier. A model which with an AUC of 0.88 or higher will receive full points, and with an AUC of 0.82 or higher will pass (get 80% of the full points).

Using your trained classifier, return a series of length 122112 with the data being the probability of the edge being a future connection, and the index being the edge as represented by a tuple of nodes.

Example:

    (107, 348)    0.35
    (542, 751)    0.40
    (20, 426)     0.55
    (50, 989)     0.35
              ...
    (939, 940)    0.15
    (555, 905)    0.35
    (75, 101)     0.65
    Length: 122112, dtype: float64

def new_connections_predictions():

    import numpy as np

    import matplotlib.pyplot as plt

    from sklearn import linear_model, datasets

    from sklearn.model_selection import train_test_split

    from sklearn.linear_model import LogisticRegression

    from sklearn.metrics import roc_curve, auc

?

    #Data preprocessing and exploration

    indices = future_connections.index.values

    

    df = pd.DataFrame(index=G.nodes())

    attr1 = nx.get_node_attributes(G,'Department')

    df['Department'] =  (attr1.values())

    attr2 = nx.get_node_attributes(G,'ManagementSalary')

    df['ManagementSalary'] =  (attr2.values())

    df['clustering'] = pd.Series(nx.clustering(G))

    df['degree'] = pd.Series(G.degree())

    

    

    pred_data = future_connections[future_connections['Future Connection'].isnull()]

    test_train = future_connections[future_connections['Future Connection'].notnull()]

    #test_train = test_train.sample(frac=0.25)

    #df_total = pred_data+test_train

    

    

    preds = nx.preferential_attachment(G, future_connections.index.values)

    P=[]

    for u, v, p in preds:

        P.append(p)

    #print (P)

    future_connections['PrefAttachments'] = P

    

    

    pred_data = future_connections[future_connections['Future Connection'].isnull()]

    

    

    

    #Splitting data into test and train. Only data with known values for ManagementSalary could be selected.

    df_test_train = future_connections[future_connections['Future Connection'].notnull()]

    y = df_test_train['Future Connection']

    X = df_test_train['PrefAttachments']

    

    X_shape = X.shape[0]

    y_shape = y.shape[0]

    X = X.reshape((X_shape,1))

    y = y.reshape((y_shape,1))

   

    

    X_train, X_test, y_train, y_test = train_test_split(X, y, 

                                                    test_size=0.2, 

                                                    random_state=0)

    

    

    #Train logistic regression model

    lr = LogisticRegression().fit(X_train, y_train)

    y_score_lr = lr.fit(X_train, y_train).decision_function(X_test)

    fpr_lr, tpr_lr, _ = roc_curve(y_test, y_score_lr)

    roc_auc_lr = auc(fpr_lr, tpr_lr)

    print (roc_auc_lr)

    

    

    

    

    #Rows to test after training is done. All rows with Management salary is NaN. This is not part of test,train data.

    test_rows = future_connections[future_connections['Future Connection'].isnull()]

    test = test_rows['PrefAttachments']

    ind = test.index.values

    print (ind)

    test = test.values.reshape((test.shape[0],1))

    

    

    y_proba_lr = lr.fit(X_train, y_train).predict_proba(test)

    #print (y_proba_lr)

    b = [el[1] for el in y_proba_lr]

    

    y_proba_list = b

    #print (y_proba_list)

    ser = pd.Series(y_proba_list,index = ind )

    # Your Code Here

    

    

    return ser

new_connections_predictions()

0.831905930262
[(107, 348) (542, 751) (20, 426) ..., (939, 940) (555, 905) (75, 101)]

(107, 348)    0.051212
(542, 751)    0.031615
(20, 426)     0.363450
(50, 989)     0.030458
(942, 986)    0.029267
(324, 857)    0.030615
(13, 710)     0.246454
(19, 271)     0.459483
(319, 878)    0.030068
(659, 707)    0.031493
(49, 843)     0.029722
(208, 893)    0.031211
(377, 469)    0.147576
(405, 999)    0.031574
(129, 740)    0.044343
(292, 618)    0.041987
(239, 689)    0.029991
(359, 373)    0.078122
(53, 523)     0.047360
(276, 984)    0.029780
(202, 997)    0.029551
(604, 619)    0.030380
(270, 911)    0.030010
(261, 481)    0.121325
(200, 450)    0.149505
(213, 634)    0.031982
(644, 735)    0.031473
(346, 553)    0.035120
(521, 738)    0.042148
(422, 953)    0.046177
                ...   
(672, 848)    0.030010
(28, 127)     0.174306
(202, 661)    0.035687
(54, 195)     0.095014
(295, 864)    0.030793
(814, 936)    0.031798
(839, 874)    0.029267
(139, 843)    0.030694
(461, 544)    0.047962
(68, 487)     0.049064
(622, 932)    0.031071
(504, 936)    0.061945
(479, 528)    0.030536
(186, 670)    0.030340
(90, 395)     0.063112
(329, 521)    0.078313
(127, 218)    0.095988
(463, 993)    0.029210
(123, 142)    0.465419
(764, 885)    0.030010
(144, 824)    0.029437
(742, 985)    0.029248
(506, 684)    0.031615
(505, 916)    0.029399
(149, 214)    0.079373
(165, 923)    0.046002
(673, 755)    0.029210
(939, 940)    0.029267
(555, 905)    0.032312
(75, 101)     0.043840
Length: 122112, dtype: float64

?

